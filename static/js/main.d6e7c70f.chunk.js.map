{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","marginTop","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","getMyNweets","where","orderBy","get","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","from","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6e7c70f.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import React, {useState} from 'react';\r\nimport {authService} from \"fbase\";\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState('');\r\n    const onChange = e => {\r\n        const {\r\n            target: {name, value}\r\n        } = e;\r\n        if (name === \"email\") {\r\n            setEmail(value)\r\n        } else if (name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            let data;\r\n            if (newAccount) {\r\n                // create account\r\n                data = await authService.createUserWithEmailAndPassword(\r\n                    email, password\r\n                )\r\n            } else {\r\n                // log in\r\n                data = await authService.signInWithEmailAndPassword(\r\n                    email, password\r\n                )\r\n            }\r\n            console.log(data);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n    };\r\n\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit} className=\"container\">\r\n                <input\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"Email\"\r\n                    required value={email}\r\n                    onChange={onChange}\r\n                    className=\"authInput\"\r\n                />\r\n                <input\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    required\r\n                    value={password}\r\n                    className=\"authInput\"\r\n                    onChange={onChange}/>\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"authInput authSubmit\"\r\n                    value={newAccount ? \"Create Account\" : \"Log In\"}/>\r\n                {error && <span className=\"authError\">{error}</span>}\r\n            </form>\r\n            <span onClick={toggleAccount} className=\"authSwitch\">\r\n                {newAccount ? \"Sign in\" : \"Create Account\"}\r\n            </span>\r\n        </>\r\n    )\r\n}\r\nexport default AuthForm;","import React from 'react';\r\nimport {authService, firebaseInstance} from \"fbase\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n    faTwitter,\r\n    faGoogle,\r\n    faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n\r\n    const onSocialClick = async (e) => {\r\n        const {\r\n            target: {name},\r\n        } = e;\r\n        let provider;\r\n        if (name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        await authService.signInWithPopup(provider);\r\n    };\r\n    return (\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon\r\n                icon={faTwitter}\r\n                color={\"#04AAFF\"}\r\n                size=\"3x\"\r\n                style={{marginBottom: 30}}\r\n            />\r\n            <AuthForm/>\r\n            <div className=\"authBtns\">\r\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n                    Continue with Google <FontAwesomeIcon icon={faGoogle}/>\r\n                </button>\r\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n                    Continue with Github <FontAwesomeIcon icon={faGithub}/>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Auth;","import React, {useState} from 'react';\r\nimport {dbService, storageService} from \"../fbase\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTrash, faPencilAlt} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet = ({nweetObj, isOwner}) => {\r\n    // 수정하고 있는지 아닌지를 판단하는 editing\r\n    const [editing, setEditing] = useState(false);\r\n    // input의 값을 수정할 경우 사용되는 newNweet\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n        if (ok) {\r\n            // delete nweet\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n            // delete photo (storage에 업로드 된 사진의 URL을 얻는 refFromURL 메서드)\r\n            await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n        }\r\n    };\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        console.log(nweetObj, newNweet);\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text: newNweet,\r\n        });\r\n        setEditing(false);\r\n    }\r\n    const onChange = e => {\r\n        const {\r\n            target: {value}\r\n        } = e;\r\n        setNewNweet(value);\r\n    };\r\n    return (\r\n        <div className=\"nweet\">\r\n            {\r\n                editing ? (\r\n                    <>\r\n                        {isOwner && (\r\n                            <>\r\n                                <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        placeholder=\"Edit your nweet\"\r\n                                        value={newNweet}\r\n                                        required\r\n                                        autoFocus\r\n                                        onChange={onChange}\r\n                                        className=\"formInput\"\r\n                                    />\r\n                                    <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\"/>\r\n                                </form>\r\n                                <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                                    Cancel\r\n                                </span>\r\n                            </>\r\n                        )}\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <h4>{nweetObj.text}</h4>\r\n                        {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\r\n                        {isOwner && (\r\n                            <div className=\"nweet__actions\">\r\n                              <span onClick={onDeleteClick}>\r\n                                <FontAwesomeIcon icon={faTrash}/>\r\n                              </span>\r\n                                <span onClick={toggleEditing}>\r\n                                <FontAwesomeIcon icon={faPencilAlt}/>\r\n                              </span>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n        </div>\r\n    );\r\n};\r\nexport default Nweet;\r\n","import React, {useState} from 'react';\r\nimport {dbService, storageService} from \"fbase\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faPlus, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NweetFactory = ({userObj}) => {\r\n    // form을 위한 state\r\n    const [nweet, setNweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n    const onSubmit = async (e) => {\r\n        if (nweet === \"\") {\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        let attachmentUrl = \"\";\r\n        if (attachment !== \"\") {\r\n            // uuid를 사용해 File Reference 생성\r\n            const attachmentRef = storageService\r\n                .ref()\r\n                .child(`${userObj.uid}/${uuidv4()}`);\r\n            // \"data_url\" == FileReader().readAsDataURL()\r\n            // File URL이 String 형식이기 때문에 putString 메서드를 사용\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        const nweetObj = {\r\n            text: nweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl,\r\n        }\r\n        // 1. File을 Storage에 저장\r\n        // 2. File URL을 가지고 nweet에 추가하여 DB에 저장\r\n        await dbService.collection(\"nweets\").add(nweetObj);\r\n        setNweet(\"\");\r\n        setAttachment(\"\");\r\n    };\r\n    const onChange = e => {\r\n        const {\r\n            target: {value},\r\n        } = e;\r\n        setNweet(value);\r\n    };\r\n    const onFileChange = e => {\r\n        const\r\n            {\r\n                target: {files}\r\n            } = e;\r\n        const theFile = files[0];\r\n        // fileReader API 사용\r\n        const reader = new FileReader();\r\n        // 파일 로딩이 끝나면 finishedEvent를 갖는다.\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {\r\n                currentTarget: {result},\r\n            } = finishedEvent;\r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n                <input\r\n                    className=\"factoryInput__input\"\r\n                    value={nweet}\r\n                    onChange={onChange}\r\n                    type=\"text\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    maxLength={120}\r\n                />\r\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\"/>\r\n            </div>\r\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n                <span>Add photos</span>\r\n                <FontAwesomeIcon icon={faPlus}/>\r\n            </label>\r\n            <input\r\n                id=\"attach-file\"\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={onFileChange}\r\n                style={{\r\n                    opacity: 0,\r\n                }}\r\n            />\r\n            {attachment && (\r\n                <div className=\"factoryForm__attachment\">\r\n                    <img\r\n                        src={attachment}\r\n                        style={{\r\n                            backgroundImage: attachment,\r\n                        }}\r\n                    />\r\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n                        <span>Remove</span>\r\n                        <FontAwesomeIcon icon={faTimes}/>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </form>\r\n    )\r\n};\r\nexport default NweetFactory;","import React, {useEffect, useState} from 'react';\r\nimport {dbService, storageService} from 'fbase';\r\nimport Nweet from 'components/Nweet';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport NweetFactory from \"../components/NweetFactory\";\r\n\r\nconst Home = ({userObj}) => {\r\n    const [nweets, setNweets] = useState([]);\r\n    useEffect(() => {\r\n        // 데이터베이스 변경이 있을 경우 알림을 받는 onSnapshot 메서드(실시간 반응)\r\n        dbService.collection('nweets').onSnapshot(snapshot => {\r\n            const nweetArray = snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                ...doc.data(),\r\n            }));\r\n            setNweets(nweetArray);\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <NweetFactory userObj={userObj}/>\r\n            <div style={{ marginTop: 30 }}>\r\n                {nweets.map(nweet => (\r\n                    <Nweet key={nweet.id}\r\n                           nweetObj={nweet}\r\n                           isOwner={nweet.creatorId === userObj.uid}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Home;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTwitter} from \"@fortawesome/free-brands-svg-icons\";\r\nimport {faUser} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst Navigation = ({userObj}) => <nav>\r\n    <ul style={{display: \"flex\", justifyContent: \"center\", marginTop: 50}}>\r\n        <Link to=\"/\" style={{marginRight: 10}}>\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\"/>\r\n        </Link>\r\n        <li>\r\n            <Link\r\n                to=\"/profile\"\r\n                style={{\r\n                    marginLeft: 10,\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    fontSize: 12,\r\n                }}\r\n            >\r\n                <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\"/>\r\n                <span style={{marginTop: 10}}>\r\n            {userObj.displayName\r\n                ? `${userObj.displayName}의 Profile`\r\n                : \"Profile\"}\r\n          </span>\r\n            </Link>\r\n        </li>\r\n    </ul>\r\n</nav>;\r\n\r\nexport default Navigation","import React, {useEffect, useState} from 'react';\r\nimport {authService, dbService} from \"../fbase\";\r\nimport {useHistory} from \"react-router\";\r\n\r\nexport default ({userObj, refreshUser}) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n    const onChange = e => {\r\n        const {\r\n            target: {value},\r\n        } = e;\r\n        setNewDisplayName(value);\r\n    };\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (userObj.displayName !== newDisplayName) {\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName,\r\n            });\r\n            refreshUser();\r\n        }\r\n    }\r\n    // DB 데이터 필터링(firebase index 생성 필요)\r\n    const getMyNweets = async () => {\r\n        const nweets = await dbService\r\n            .collection(\"nweets\")\r\n            .where(\"creatorId\", \"==\", userObj.uid)\r\n            .orderBy(\"createAt\")\r\n            .get();\r\n    };\r\n\r\n    useEffect(() => {\r\n        getMyNweets();\r\n    }, [])\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <input onChange={onChange}\r\n                       type=\"text\"\r\n                       autoFocus\r\n                       placeholder=\"Display name\"\r\n                       value={newDisplayName}\r\n                       className=\"formInput\"\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Update Profile\"\r\n                    className=\"formBtn\"\r\n                    style={{\r\n                        marginTop: 10,\r\n                    }}\r\n                />\r\n            </form>\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n                Log Out\r\n            </span>\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport {HashRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Navigation from \"components/Navigation\";\r\nimport Profile from \"routes/Profile\";\r\n\r\nconst AppRouter = ({isLoggedIn, userObj, refreshUser}) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj}/>}\r\n            <Switch>\r\n                <>\r\n                    {isLoggedIn ? (\r\n                        <div\r\n                            style={{\r\n                                maxWidth: 890,\r\n                                width: \"100%\",\r\n                                margin: \"0 auto\",\r\n                                marginTop: 80,\r\n                                display: \"flex\",\r\n                                justifyContent: \"center\",\r\n                            }}\r\n                        >\r\n                            <Route exact path=\"/\">\r\n                                <Home userObj={userObj}/>\r\n                            </Route>\r\n                            <Route exact path=\"/profile\">\r\n                                <Profile userObj={userObj} refreshUser={refreshUser}/>\r\n                            </Route>\r\n                            <Redirect from=\"*\" to=\"/\"/>\r\n                        </div>\r\n                    ) : (\r\n                        <>\r\n                            <Route exact path=\"/\"><Auth/></Route>\r\n                            <Redirect from=\"*\" to=\"/\"/>\r\n                        </>\r\n                    )}\r\n                </>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\nexport default AppRouter;","import React, {useEffect, useState} from 'react';\nimport AppRouter from \"components/Router\";\nimport {authService} from \"fbase\";\n\nfunction App() {\n    const [init, setInit] = useState(false);\n    const [userObj, setUserObj] = useState(null);\n\n    // component가 mounted되면 한 번만 호출되는 useEffect\n    useEffect(() => {\n        authService.onAuthStateChanged((user) => {\n            if (user) {\n                // String, Boolean 타입이 아닌 Object(e.g. user)의 경우엔 필요한 객체만 불러온다.\n                // ex) 성능 이슈 및 리렌더링이 안되는 문제의 소지가 있다.\n                setUserObj({\n                    displayName: user.displayName,\n                    uid: user.uid,\n                    updateProfile: (args) => user.updateProfile(args),\n                });\n            } else {\n                setUserObj(null);\n            }\n            setInit(true)\n        });\n    }, []);\n    const refreshUser = () => {\n        const user = authService.currentUser;\n        setUserObj({\n            displayName: user.displayName,\n            uid: user.uid,\n            updateProfile: (args) => user.updateProfile(args),\n        });\n    }\n    return (\n        <>\n            {init ? <AppRouter\n                refreshUser={refreshUser}\n                isLoggedIn={Boolean(userObj)}\n                userObj={userObj}/> : \"Initializing...\"}\n            <footer>&copy;{new Date().getFullYear()} Nwitter</footer>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}